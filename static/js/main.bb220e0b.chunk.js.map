{"version":3,"sources":["components/DisplayNumber/Display.tsx","components/DisplayNumber/IncrementButton.tsx","components/DisplayNumber/ResetButton.tsx","components/SettingsDisplay/SettingsButton.tsx","components/SettingsDisplay/MaxValueInput.tsx","components/SettingsDisplay/StartValueInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","displayValue","maxInputValue","IncrementButton","startInputValue","disabled","onClick","getCountNumber","ResetButton","resetButton","SettingsButton","addValueToDisplay","MaxValueInput","value","type","onChange","getMaxInputValue","StartValueInput","getStartInputValue","App","useState","setDisplayValue","setStartInputValue","setMaxInputValue","event","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb220e0b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type DisplayPropsType = {\n    displayValue: number\n    maxInputValue: number\n}\n\nexport function Display(props: DisplayPropsType) {\n    return (\n        <div className={(props.displayValue === 0 ? 'number_field' : props.displayValue === props.maxInputValue ? \"red\" : \"number_field\")}\n        >{props.displayValue}</div>\n    )\n}\n\n","import React from \"react\";\n\nexport type IncrementButtonPropsType = {\n    displayValue: number\n    startInputValue: number\n    maxInputValue: number\n    getCountNumber: () => void\n\n}\n\nexport function IncrementButton(props: IncrementButtonPropsType) {\n    return (\n        <button className={ (props.displayValue < props.startInputValue ? 'disabled_button' : ''\n                             || props.displayValue === 0 ? 'disabled_button' : ''\n                             || props.displayValue === props.maxInputValue ? 'disabled_button' : '' ) }\n                disabled={props.displayValue === props.maxInputValue}\n                onClick={props.getCountNumber}>inc</button>\n        )\n}\n\n","import React, {Dispatch, SetStateAction } from \"react\";\n\nexport type ResetButtonPropsType = {\n    startInputValue: number\n    maxInputValue: number\n    displayValue: number\n    resetButton: () => void\n}\n\nexport function ResetButton(props: ResetButtonPropsType) {\n    return (\n        <button  className={ (props.displayValue === 0 ? 'disabled_button' : '') }\n                 disabled={props.displayValue === 0 && props.startInputValue === 0 && props.maxInputValue === 0}\n                 onClick={props.resetButton}>reset</button>\n\n    )\n}","import React from \"react\";\n\ntype SettingsButtonType = {\n    addValueToDisplay: () => void\n    startInputValue: number\n    maxInputValue: number\n    displayValue: number\n}\n\nexport function SettingsButton(props: SettingsButtonType) {\n\n\n    return (\n        // <button className={(props.startInputValue === 0 ? \"disabled_button\" : \"settings_button\"\n        //                     && props.displayValue >= props.startInputValue ? \"disabled_button\" : \"settings_button\"\n        //                     && props.maxInputValue <= props.startInputValue ? \"disabled_button\" : \"settings_button\")}\n        //         onClick={props.addValueToDisplay}>set</button>\n\n        <button className={( props.maxInputValue > props.startInputValue ? \"settings_button\" : \"disabled_button\")}\n                disabled={props.startInputValue < 0\n                || props.startInputValue > props.maxInputValue\n                || props.startInputValue === props.maxInputValue\n                || props.displayValue >= props.startInputValue}\n                onClick={props.addValueToDisplay}>set</button>\n\n    )\n}\n\n","import React, {ChangeEvent} from \"react\";\n\ntype MaxValueInputType = {\n    maxInputValue: number\n    getMaxInputValue: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function MaxValueInput(props: MaxValueInputType) {\n    return (\n        <div className=\"maxvalue_wrapper\">\n            <span>max value:</span>\n            <input\n                value={props.maxInputValue}\n                type=\"number\"\n                onChange={props.getMaxInputValue}/>\n        </div>\n    )\n}","import React, {ChangeEvent, ChangeEventHandler, FC, useState} from \"react\";\n\nexport  type StartValueInputType = {\n    startInputValue: number\n    getStartInputValue: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const StartValueInput: FC<StartValueInputType> = ({startInputValue, getStartInputValue}) => {\n\n    return (\n        <div className=\"maxvalue_wrapper\">\n            <span>start value:</span>\n            <input\n                value={startInputValue}\n                type=\"number\"\n                onChange={getStartInputValue}\n            />\n        </div>\n    )\n}\n\n\n// export function StartValueInput(props: StartValueInputType) {\n//\n//     return (\n//         <div className=\"maxvalue_wrapper\">\n//             <span>start value:</span>\n//             <input\n//                 value={props.startCount}\n//                 type=\"number\"\n//                 onChange={ (e) => {props.startCountNumber(+e.currentTarget.value)}  }\n//             />\n//         </div>\n//     )\n// }\n\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {Display} from \"./components/DisplayNumber/Display\";\nimport {IncrementButton} from './components/DisplayNumber/IncrementButton';\nimport {ResetButton} from \"./components/DisplayNumber/ResetButton\";\nimport {SettingsButton} from \"./components/SettingsDisplay/SettingsButton\";\nimport {MaxValueInput} from \"./components/SettingsDisplay/MaxValueInput\";\nimport {StartValueInput} from \"./components/SettingsDisplay/StartValueInput\";\n\nfunction App() {\n    let [displayValue, setDisplayValue] = useState<number>(0)\n    let [startInputValue, setStartInputValue] = useState<number>(0)\n    let [maxInputValue, setMaxInputValue] = useState<number>(0)\n\n    function getCountNumber() {\n        displayValue++\n        setDisplayValue(displayValue)\n    }\n    function resetButton() {\n        setDisplayValue(0)\n        setMaxInputValue(0)\n        setStartInputValue(0)\n    }\n    function getStartInputValue(event: ChangeEvent<HTMLInputElement>) {\n        setStartInputValue(+event.currentTarget.value)\n    }\n    function getMaxInputValue(event: ChangeEvent<HTMLInputElement>) {\n        setMaxInputValue(+event.currentTarget.value)\n    }\n    function addValueToDisplay() {\n        setDisplayValue(startInputValue)\n        setMaxInputValue(maxInputValue)\n    }\n\n    return (\n        <div className=\"main_wrapper\">\n            <div className=\"settings_wrapper\">\n                <div className=\"settings_display__wrapper\">\n                    <MaxValueInput maxInputValue={maxInputValue} getMaxInputValue={getMaxInputValue}/>\n                    <StartValueInput getStartInputValue={getStartInputValue} startInputValue={startInputValue}/>\n                </div>\n                <div className=\"settings_button__wrapper\">\n                    <SettingsButton addValueToDisplay={addValueToDisplay}\n                                    startInputValue={startInputValue}\n                                    maxInputValue={maxInputValue}\n                                    displayValue={displayValue}/>\n                </div>\n            </div>\n\n            <div className=\"display_wrapper\">\n                <Display displayValue={displayValue} maxInputValue={maxInputValue}/>\n                <div className='button_wrapper'>\n                    <IncrementButton displayValue={displayValue}\n                                     maxInputValue={maxInputValue}\n                                     startInputValue={startInputValue}\n                                     getCountNumber={getCountNumber}/>\n                    <ResetButton startInputValue={startInputValue}\n                                 maxInputValue={maxInputValue}\n                                 displayValue={displayValue}\n                                 resetButton={resetButton}/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}